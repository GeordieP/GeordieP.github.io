(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{11:function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0}),s.withMDXComponents=void 0;var t,e=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(n[t]=a[t])}return n},o=a(1),p=(t=o)&&t.__esModule?t:{default:t};var c=p.default.createContext({}),u=c.Provider,l=c.Consumer;s.withMDXComponents=function(n){return function(s){var a=s.components,t=function(n,s){var a={};for(var t in n)s.indexOf(t)>=0||Object.prototype.hasOwnProperty.call(n,t)&&(a[t]=n[t]);return a}(s,["components"]);return p.default.createElement(l,null,function(s){return p.default.createElement(n,e({components:a||s},t))})}};s.default=function(n){var s=n.components,a=n.children;return p.default.createElement(u,{value:s},a)}},12:function(n,s,a){"use strict";function t(n,s){if(null==n)return{};var a,t,e=function(n,s){if(null==n)return{};var a,t,e={},o=Object.keys(n);for(t=0;t<o.length;t++)a=o[t],s.indexOf(a)>=0||(e[a]=n[a]);return e}(n,s);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)a=o[t],s.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(e[a]=n[a])}return e}a.d(s,"a",function(){return t})},13:function(n,s,a){"use strict";function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}a.d(s,"a",function(){return t})},14:function(n,s,a){"use strict";function t(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}function e(n,s,a){return s&&t(n.prototype,s),a&&t(n,a),n}a.d(s,"a",function(){return e})},15:function(n,s,a){"use strict";function t(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}a.d(s,"a",function(){return t})},16:function(n,s,a){"use strict";function t(n){return(t=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}a.d(s,"a",function(){return t})},17:function(n,s,a){"use strict";function t(n){return(t="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"===typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function e(n){return(e="function"===typeof Symbol&&"symbol"===t(Symbol.iterator)?function(n){return t(n)}:function(n){return n&&"function"===typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":t(n)})(n)}var o=a(15);function p(n,s){return!s||"object"!==e(s)&&"function"!==typeof s?Object(o.a)(n):s}a.d(s,"a",function(){return p})},18:function(n,s,a){"use strict";function t(n,s){return(t=Object.setPrototypeOf||function(n,s){return n.__proto__=s,n})(n,s)}function e(n,s){if("function"!==typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),s&&t(n,s)}a.d(s,"a",function(){return e})},19:function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var t=a(20);Object.defineProperty(s,"MDXTag",{enumerable:!0,get:function(){return o(t).default}});var e=a(11);function o(n){return n&&n.__esModule?n:{default:n}}Object.defineProperty(s,"MDXProvider",{enumerable:!0,get:function(){return o(e).default}})},20:function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var t,e=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(n[t]=a[t])}return n},o=function(){function n(n,s){for(var a=0;a<s.length;a++){var t=s[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}return function(s,a,t){return a&&n(s.prototype,a),t&&n(s,t),s}}(),p=a(1),c=(t=p)&&t.__esModule?t:{default:t},u=a(11);var l={inlineCode:"code",wrapper:"div"},i=function(n){function s(){return function(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}(this,s),function(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!==typeof s&&"function"!==typeof s?n:s}(this,(s.__proto__||Object.getPrototypeOf(s)).apply(this,arguments))}return function(n,s){if("function"!==typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}(s,p.Component),o(s,[{key:"render",value:function(){var n=this.props,s=n.name,a=n.parentName,t=n.props,o=void 0===t?{}:t,p=n.children,u=n.components,i=void 0===u?{}:u,r=n.Layout,k=n.layoutProps,m=i[a+"."+s]||i[s]||l[s]||s;return r?c.default.createElement(r,e({components:i},k),c.default.createElement(m,o,p)):c.default.createElement(m,o,p)}}]),s}();s.default=(0,u.withMDXComponents)(i)},328:function(n,s,a){"use strict";a.r(s),a.d(s,"default",function(){return k}),a.d(s,"tableOfContents",function(){return m}),a.d(s,"frontMatter",function(){return f});var t=a(12),e=a(13),o=a(14),p=a(17),c=a(16),u=a(18),l=a(1),i=a.n(l),r=a(19),k=function(n){function s(n){var a;return Object(e.a)(this,s),(a=Object(p.a)(this,Object(c.a)(s).call(this,n))).layout=null,a}return Object(u.a)(s,n),Object(o.a)(s,[{key:"render",value:function(){var n=this.props,s=n.components;Object(t.a)(n,["components"]);return i.a.createElement(r.MDXTag,{name:"wrapper",components:s},i.a.createElement(r.MDXTag,{name:"h1",components:s,props:{id:"js-object-destructuring-assignment"}},"JS Object Destructuring Assignment"),i.a.createElement(r.MDXTag,{name:"h4",components:s,props:{id:"august-4-2018"}},"August 4, 2018"),i.a.createElement(r.MDXTag,{name:"p",components:s},"This post is simply a mirror of the GitHub Gist I\u2019ve written on this topic. It\u2019s a nice reference for the occasionally confusing syntax of destructuring assignment in JavaScript."),i.a.createElement(r.MDXTag,{name:"p",components:s},"The full source is below, but the version on Gist may be kept further up-to-date, so I recommend you read it there rather than here!"),i.a.createElement(r.MDXTag,{name:"h3",components:s,props:{id:"gist-url"}},"Gist URL:"),i.a.createElement(r.MDXTag,{name:"p",components:s},i.a.createElement(r.MDXTag,{name:"a",components:s,parentName:"p",props:{href:"https://gist.github.com/GeordieP/6cb735d0472d3654a6948b82de25e3b0"}},"https://gist.github.com/GeordieP/6cb735d0472d3654a6948b82de25e3b0")),i.a.createElement(r.MDXTag,{name:"hr",components:s}),i.a.createElement(r.MDXTag,{name:"p",components:s},"Find proper documentation on MDN:"),i.a.createElement(r.MDXTag,{name:"p",components:s},i.a.createElement(r.MDXTag,{name:"a",components:s,parentName:"p",props:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"}},"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment")),i.a.createElement(r.MDXTag,{name:"h4",components:s,props:{id:"some-general-destructuring-rules"}},"Some general destructuring rules:"),i.a.createElement(r.MDXTag,{name:"ul",components:s},i.a.createElement(r.MDXTag,{name:"li",components:s,parentName:"ul"},"If the right side of a colon is an identifier, the identifier is brought into scope (an alias) and refers to the object on the left side. (eg. see ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:s,parentName:"li"},"a2"),")"),i.a.createElement(r.MDXTag,{name:"li",components:s,parentName:"ul"},"If the right side of a colon is an object expression ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:s,parentName:"li"},"O"),", the left side refers to ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:s,parentName:"li"},"O"),"'s name (key) within its parent object. (eg. see ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:s,parentName:"li"},"b1"),")"),i.a.createElement(r.MDXTag,{name:"li",components:s,parentName:"ul"},"If no alias is given, the identifier used to access the property is brought into scope."),i.a.createElement(r.MDXTag,{name:"li",components:s,parentName:"ul"},"If we access a child of object ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:s,parentName:"li"},"O"),", and want to bring ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:s,parentName:"li"},"O")," into scope as well, we have to reference it separately from where we access its child. (see ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:s,parentName:"li"},"b3"),")")),i.a.createElement(r.MDXTag,{name:"pre",components:s,props:{className:"language-jsx"}},i.a.createElement(r.MDXTag,{name:"code",components:s,parentName:"pre",props:{className:"language-js",metastring:null,dangerouslySetInnerHTML:{__html:'<span class="token comment">// object used for examples</span>\n<span class="token keyword">const</span> comment <span class="token operator">=</span> <span class="token punctuation">{</span>\n    parent<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        id<span class="token punctuation">:</span> <span class="token string">\'0001\'</span><span class="token punctuation">,</span>\n        name<span class="token punctuation">:</span> <span class="token string">\'issue1\'</span><span class="token punctuation">,</span>\n\n        author<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            id<span class="token punctuation">:</span> <span class="token string">\'01\'</span><span class="token punctuation">,</span>\n            name<span class="token punctuation">:</span> <span class="token string">\'user1\'</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    body<span class="token punctuation">:</span> <span class="token string">\'hello!\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**************************\n* SECTION A: TOP LEVEL\n***************************/</span>\n\n<span class="token comment">/** a1 - no alias **/</span>\n<span class="token keyword">function</span> <span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> parent<span class="token punctuation">,</span> body <span class="token punctuation">}</span> <span class="token operator">=</span> comment<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// { id: \'0001\', name: \'issue1\', author: { id: \'01\', name: \'user1\' } }</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// hello!</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// a1();</span>\n\n<span class="token comment">/** a2 - with alias for parent **/</span>\n<span class="token keyword">function</span> <span class="token function">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> parent<span class="token punctuation">:</span> commentParent<span class="token punctuation">,</span> body <span class="token punctuation">}</span> <span class="token operator">=</span> comment<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>commentParent<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// { id: \'0001\', name: \'issue1\', author: { id: \'01\', name: \'user1\' } }</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// hello!</span>\n    <span class="token comment">// console.log(parent);             // (ReferenceError: parent is not defined) - not brought into scope, since we access deeper than the level it exists on</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// a2();</span>\n\n<span class="token comment">/**************************\n* SECTION B: SECOND LEVEL\n***************************/</span>\n\n<span class="token comment">/** b1 - no aliases **/</span>\n<span class="token keyword">function</span> <span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> parent<span class="token punctuation">:</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">,</span> body <span class="token punctuation">}</span> <span class="token operator">=</span> comment<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// issue1</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// hello!</span>\n    <span class="token comment">// console.log(parent);             // (ReferenceError: parent is not defined)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// b1();</span>\n\n<span class="token comment">/** b2 - with alias for parent issue\'s name, and comment body **/</span>\n<span class="token keyword">function</span> <span class="token function">b2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">const</span> <span class="token punctuation">{</span> parent<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> issueName <span class="token punctuation">}</span><span class="token punctuation">,</span> body<span class="token punctuation">:</span> commentBody <span class="token punctuation">}</span> <span class="token operator">=</span> comment<span class="token punctuation">;</span>\n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>issueName<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// issue1</span>\n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>commentBody<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// hello!</span>\n     <span class="token comment">// console.log(parent);             // (ReferenceError: parent is not defined)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// b2();</span>\n\n<span class="token comment">/** b3 - alias on issue\'s name, bring parent into scope by referencing it separately **/</span>\n<span class="token keyword">function</span> <span class="token function">b3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> parent<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> issueName <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> comment<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>issueName<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// issue1</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// { id: \'0001\', name: \'issue1\', author: { id: \'01\', name: \'user1\' } }</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// b3();</span>\n\n<span class="token comment">/** b3 - alias on issue\'s name, and on separate reference to parent object **/</span>\n<span class="token keyword">function</span> <span class="token function">b4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> parent<span class="token punctuation">:</span> theParent<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> issueName <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> comment<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>issueName<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// issue1</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>theParent<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// { id: \'0001\', name: \'issue1\', author: { id: \'01\', name: \'user1\' } }</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// b4();</span>\n\n<span class="token comment">/**************************\n* SECTION C: THIRD LEVEL\n***************************/</span>\n\n<span class="token comment">/** c1 - no aliases **/</span>\n<span class="token keyword">function</span> <span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> parent<span class="token punctuation">:</span> <span class="token punctuation">{</span> author<span class="token punctuation">:</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> body <span class="token punctuation">}</span> <span class="token operator">=</span> comment<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// user1</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// hello</span>\n    <span class="token comment">// console.log(parent);             // (ReferenceError: parent is not defined)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// c1();</span>\n\n<span class="token comment">/** c2 - with alias for parent issue\'s author\'s name **/</span>\n<span class="token keyword">function</span> <span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> parent<span class="token punctuation">:</span> <span class="token punctuation">{</span> author<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> authorName <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> body <span class="token punctuation">}</span> <span class="token operator">=</span> comment<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>authorName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// user1</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// hello!</span>\n    <span class="token comment">// console.log(parent);             // (ReferenceError: parent is not defined)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// c2();</span>\n\n<span class="token comment">/** c3 - alias everything **/</span>\n<span class="token keyword">function</span> <span class="token function">c3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> parent<span class="token punctuation">:</span> <span class="token punctuation">{</span> author<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> authorName<span class="token punctuation">,</span> id<span class="token punctuation">:</span> authorID <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> body<span class="token punctuation">:</span> commentBody <span class="token punctuation">}</span> <span class="token operator">=</span> comment<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>authorID<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 01</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>authorName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// user1</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>commentBody<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// hello!</span>\n    <span class="token comment">// console.log(parent);             // (ReferenceError: parent is not defined)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// c3();</span>\n\n<span class="token comment">/** c4 - oh no **/</span>\n<span class="token keyword">function</span> <span class="token function">c4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> parent<span class="token punctuation">:</span> theParent<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> issueName<span class="token punctuation">,</span> id<span class="token punctuation">:</span> issueID<span class="token punctuation">,</span> author<span class="token punctuation">:</span> issueAuthor<span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> authorName<span class="token punctuation">,</span> id<span class="token punctuation">:</span> authorID <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> body<span class="token punctuation">:</span> commentBody <span class="token punctuation">}</span> <span class="token operator">=</span> comment<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>theParent<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// { id: \'0001\', name: \'issue1\', author: { id: \'01\', name: \'user1\' } }</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>issueName<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// issue1</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>issueID<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 0001</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>issueAuthor<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// { id: \'01\', name: \'user1\' }</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>authorName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// user1</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>authorID<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 01</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>commentBody<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// hello!</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// c4();</span>\n'}}})))}}]),s}(i.a.Component),m=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return[{id:"gist-url",level:3,title:"Gist URL:",children:[]}]},f={}}}]);
//# sourceMappingURL=7.30ea74c0.chunk.js.map