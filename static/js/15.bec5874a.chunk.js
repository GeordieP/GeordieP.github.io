(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{11:function(n,a,s){"use strict";Object.defineProperty(a,"__esModule",{value:!0}),a.withMDXComponents=void 0;var t,e=Object.assign||function(n){for(var a=1;a<arguments.length;a++){var s=arguments[a];for(var t in s)Object.prototype.hasOwnProperty.call(s,t)&&(n[t]=s[t])}return n},p=s(1),o=(t=p)&&t.__esModule?t:{default:t};var c=o.default.createContext({}),l=c.Provider,u=c.Consumer;a.withMDXComponents=function(n){return function(a){var s=a.components,t=function(n,a){var s={};for(var t in n)a.indexOf(t)>=0||Object.prototype.hasOwnProperty.call(n,t)&&(s[t]=n[t]);return s}(a,["components"]);return o.default.createElement(u,null,function(a){return o.default.createElement(n,e({components:s||a},t))})}};a.default=function(n){var a=n.components,s=n.children;return o.default.createElement(l,{value:a},s)}},12:function(n,a,s){"use strict";function t(n,a){if(null==n)return{};var s,t,e=function(n,a){if(null==n)return{};var s,t,e={},p=Object.keys(n);for(t=0;t<p.length;t++)s=p[t],a.indexOf(s)>=0||(e[s]=n[s]);return e}(n,a);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(n);for(t=0;t<p.length;t++)s=p[t],a.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(n,s)&&(e[s]=n[s])}return e}s.d(a,"a",function(){return t})},13:function(n,a,s){"use strict";function t(n,a){if(!(n instanceof a))throw new TypeError("Cannot call a class as a function")}s.d(a,"a",function(){return t})},14:function(n,a,s){"use strict";function t(n,a){for(var s=0;s<a.length;s++){var t=a[s];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}function e(n,a,s){return a&&t(n.prototype,a),s&&t(n,s),n}s.d(a,"a",function(){return e})},15:function(n,a,s){"use strict";function t(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}s.d(a,"a",function(){return t})},16:function(n,a,s){"use strict";function t(n){return(t=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}s.d(a,"a",function(){return t})},17:function(n,a,s){"use strict";function t(n){return(t="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"===typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function e(n){return(e="function"===typeof Symbol&&"symbol"===t(Symbol.iterator)?function(n){return t(n)}:function(n){return n&&"function"===typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":t(n)})(n)}var p=s(15);function o(n,a){return!a||"object"!==e(a)&&"function"!==typeof a?Object(p.a)(n):a}s.d(a,"a",function(){return o})},18:function(n,a,s){"use strict";function t(n,a){return(t=Object.setPrototypeOf||function(n,a){return n.__proto__=a,n})(n,a)}function e(n,a){if("function"!==typeof a&&null!==a)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(a&&a.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),a&&t(n,a)}s.d(a,"a",function(){return e})},19:function(n,a,s){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var t=s(20);Object.defineProperty(a,"MDXTag",{enumerable:!0,get:function(){return p(t).default}});var e=s(11);function p(n){return n&&n.__esModule?n:{default:n}}Object.defineProperty(a,"MDXProvider",{enumerable:!0,get:function(){return p(e).default}})},20:function(n,a,s){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var t,e=Object.assign||function(n){for(var a=1;a<arguments.length;a++){var s=arguments[a];for(var t in s)Object.prototype.hasOwnProperty.call(s,t)&&(n[t]=s[t])}return n},p=function(){function n(n,a){for(var s=0;s<a.length;s++){var t=a[s];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}return function(a,s,t){return s&&n(a.prototype,s),t&&n(a,t),a}}(),o=s(1),c=(t=o)&&t.__esModule?t:{default:t},l=s(11);var u={inlineCode:"code",wrapper:"div"},i=function(n){function a(){return function(n,a){if(!(n instanceof a))throw new TypeError("Cannot call a class as a function")}(this,a),function(n,a){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!a||"object"!==typeof a&&"function"!==typeof a?n:a}(this,(a.__proto__||Object.getPrototypeOf(a)).apply(this,arguments))}return function(n,a){if("function"!==typeof a&&null!==a)throw new TypeError("Super expression must either be null or a function, not "+typeof a);n.prototype=Object.create(a&&a.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),a&&(Object.setPrototypeOf?Object.setPrototypeOf(n,a):n.__proto__=a)}(a,o.Component),p(a,[{key:"render",value:function(){var n=this.props,a=n.name,s=n.parentName,t=n.props,p=void 0===t?{}:t,o=n.children,l=n.components,i=void 0===l?{}:l,r=n.Layout,m=n.layoutProps,k=i[s+"."+a]||i[a]||u[a]||a;return r?c.default.createElement(r,e({components:i},m),c.default.createElement(k,p,o)):c.default.createElement(k,p,o)}}]),a}();a.default=(0,l.withMDXComponents)(i)},339:function(n,a,s){"use strict";s.r(a),s.d(a,"default",function(){return m}),s.d(a,"tableOfContents",function(){return k}),s.d(a,"frontMatter",function(){return d});var t=s(12),e=s(13),p=s(14),o=s(17),c=s(16),l=s(18),u=s(1),i=s.n(u),r=s(19),m=function(n){function a(n){var s;return Object(e.a)(this,a),(s=Object(o.a)(this,Object(c.a)(a).call(this,n))).layout=null,s}return Object(l.a)(a,n),Object(p.a)(a,[{key:"render",value:function(){var n=this.props,a=n.components;Object(t.a)(n,["components"]);return i.a.createElement(r.MDXTag,{name:"wrapper",components:a},i.a.createElement(r.MDXTag,{name:"h1",components:a,props:{id:"testing-components---hyperapp-elfinder"}},"Testing Components - Hyperapp ElFinder"),i.a.createElement(r.MDXTag,{name:"h4",components:a,props:{id:"april-8-2018"}},"April 8, 2018"),i.a.createElement(r.MDXTag,{name:"p",components:a},i.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"p"},"(ElFinder function source can be found at the bottom of this post)")),i.a.createElement(r.MDXTag,{name:"p",components:a},"Testing Hyperapp components can be a pain. Often the attribute or value we\u2019re trying to validate is buried under several layers of virtual DOM nodes, and the logic required to drill down to the single element we\u2019re looking for can end up being unreadable, messy, and repetitive."),i.a.createElement(r.MDXTag,{name:"p",components:a},"Consider the following component:"),i.a.createElement(r.MDXTag,{name:"pre",components:a,props:{className:"language-jsx"}},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js",metastring:null,dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> <span class="token function-variable function">TestComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">,</span> title<span class="token punctuation">,</span> blurb<span class="token punctuation">,</span> content<span class="token punctuation">,</span> footerContent <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>rootEl<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>placeholder<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>importantInfo<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>importantInfo_inner<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>commonClNm info_summary<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>summary_title<span class="token punctuation">\'</span></span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> key <span class="token operator">+</span> <span class="token string">\'_summary_title\'</span> <span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n                        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>strong</span><span class="token punctuation">></span></span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>strong</span><span class="token punctuation">></span></span><span class="token plain-text">\n                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h3</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>summary_blurb<span class="token punctuation">\'</span></span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> key <span class="token operator">+</span> <span class="token string">\'_summary_blurb\'</span> <span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n                        </span><span class="token punctuation">{</span> blurb <span class="token punctuation">}</span><span class="token plain-text">\n                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">\n                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>commonClNm<span class="token punctuation">\'</span></span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> key <span class="token operator">+</span> <span class="token string">\'_details_content\'</span> <span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n                    </span><span class="token punctuation">{</span> content <span class="token punctuation">}</span><span class="token plain-text">\n                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>commonClNm<span class="token punctuation">\'</span></span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> key <span class="token operator">+</span>  <span class="token string">\'_details_footer\'</span> <span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n                    </span><span class="token punctuation">{</span> footerContent <span class="token punctuation">}</span><span class="token plain-text">\n                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"Given the test case:"),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{metastring:null}},"Verify the summary blurb element was given the correct ID, and contains the expected text.\n")),i.a.createElement(r.MDXTag,{name:"p",components:a},"One approach is to simply march down the tree referencing children by index."),i.a.createElement(r.MDXTag,{name:"ul",components:a},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"li"},"Test Example 1."))),i.a.createElement(r.MDXTag,{name:"pre",components:a,props:{className:"language-jsx"}},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js",metastring:null,dangerouslySetInnerHTML:{__html:'<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Blurb element renders given text in element with expected ID.\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span>\n        key<span class="token punctuation">:</span> <span class="token string">\'first\'</span><span class="token punctuation">,</span>\n        title<span class="token punctuation">:</span> <span class="token string">\'FirstPost\'</span><span class="token punctuation">,</span>\n        blurb<span class="token punctuation">:</span> <span class="token string">\'A small blurb about the content\'</span><span class="token punctuation">,</span>\n        content<span class="token punctuation">:</span> <span class="token string">\'The full content\'</span><span class="token punctuation">,</span>\n        footerContent<span class="token punctuation">:</span> <span class="token string">\'Date\'</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> el_root <span class="token operator">=</span> <span class="token function">TestComponent</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n\n    <span class="token comment">//</span>\n    <span class="token comment">// Climb down through each element\'s children to find what we\'re looking for</span>\n    <span class="token comment">//</span>\n\n    <span class="token keyword">const</span> el_blurb <span class="token operator">=</span> el_root\n        <span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>     <span class="token comment">// div.importantInfo</span>\n        <span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>     <span class="token comment">// div.importantInfo_inner</span>\n        <span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>     <span class="token comment">// div.info_summary</span>\n        <span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>     <span class="token comment">// h3.summary_blurb</span>\n\n    <span class="token comment">// verify ID is correct</span>\n    <span class="token function">expect</span><span class="token punctuation">(</span>el_blurb<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_summary_blurb`</span></span><span class="token punctuation">)</span>\n\n    <span class="token comment">// verify content is correct</span>\n    <span class="token function">expect</span><span class="token punctuation">(</span>el_blurb<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>blurb<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"While this works, it\u2019s quite difficult to read (especially without the helpful comments), and can be broken by the simplest of component layout changes."),i.a.createElement(r.MDXTag,{name:"p",components:a},"Another approach is a bit less likely to be broken by small changes, but requires a lot more code and in some cases may end up being even less readable:"),i.a.createElement(r.MDXTag,{name:"ul",components:a},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"li"},"Test Example 2a."))),i.a.createElement(r.MDXTag,{name:"pre",components:a,props:{className:"language-jsx"}},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js",metastring:null,dangerouslySetInnerHTML:{__html:'<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Blurb element renders given text in element with expected ID.\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n\n    <span class="token keyword">const</span> el_blurb <span class="token operator">=</span> el_root\n          <span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>el <span class="token operator">=></span> el<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className <span class="token operator">===</span> <span class="token string">\'importantInfo\'</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>el <span class="token operator">=></span> el<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className <span class="token operator">===</span> <span class="token string">\'importantInfo_inner\'</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>el <span class="token operator">=></span> el<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className <span class="token operator">===</span> <span class="token string">\'info_summary\'</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>el <span class="token operator">=></span> el<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className <span class="token operator">===</span> <span class="token string">\'summary_blurb\'</span><span class="token punctuation">)</span>\n\n    <span class="token comment">/// ERROR! ///</span>\n\n    <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"Now that we\u2019re using element attributes, the test will no longer break if an item is moved before or after a sibling in the markup, and we find it easier to understand which element we\u2019re looking at during each step."),i.a.createElement(r.MDXTag,{name:"p",components:a},"The biggest issue with this, as shown by the comment, is that it throws an error;"),i.a.createElement(r.MDXTag,{name:"p",components:a},i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"TypeError: Cannot read property 'children' of undefined")),i.a.createElement(r.MDXTag,{name:"p",components:a},"Unfortunately, basic console output doesn\u2019t do a good job of telling us where this error came from; it claims it originates from the line of the assignment."),i.a.createElement(r.MDXTag,{name:"p",components:a},"With some investigation, we can determine that the error is coming from the fact that our search for a child element with the className ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"info_summary")," returned ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"undefined"),". If we take another look at the component markup, we can see why this is:"),i.a.createElement(r.MDXTag,{name:"pre",components:a,props:{className:"language-jsx"}},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js",metastring:null,dangerouslySetInnerHTML:{__html:'    <span class="token operator">...</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>commonClNm info_summary<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    ...\n</span>'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"The ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"info_summary")," element has two classes applied (the other being ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"commonClNm"),"), so the string match didn\u2019t work like it had in previous lines. It\u2019s easy enough to fix."),i.a.createElement(r.MDXTag,{name:"ul",components:a},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"li"},"Test Example 2b."))),i.a.createElement(r.MDXTag,{name:"pre",components:a,props:{className:"language-jsx"}},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js",metastring:null,dangerouslySetInnerHTML:{__html:'<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Blurb element renders given text in element with expected ID.\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n\n    <span class="token keyword">const</span> el_blurb <span class="token operator">=</span> el_root\n          <span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>el <span class="token operator">=></span> el<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className <span class="token operator">===</span> <span class="token string">\'importantInfo\'</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>el <span class="token operator">=></span> el<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className <span class="token operator">===</span> <span class="token string">\'importantInfo_inner\'</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>el <span class="token operator">=></span> el<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'info_summary\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// Error fixed</span>\n          <span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>el <span class="token operator">=></span> el<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className <span class="token operator">===</span> <span class="token string">\'summary_blurb\'</span><span class="token punctuation">)</span>\n\n    <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"That\u2019s fine for this case, but will obviously get tiring to write after a while."),i.a.createElement(r.MDXTag,{name:"p",components:a},"With the intention of staying as light as possible on library dependencies, there are a number of other ways people test their Hyperapp components; as far as I\u2019ve seen, the two most common are:"),i.a.createElement(r.MDXTag,{name:"ul",components:a},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Reproducing the component\u2019s markup inside the test file using standard ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"h()")," calls, and comparing the output with the virtual dom object tree returned by the imported component after having run both through ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"JSON.stringify()"),"."),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Mocking the expected output of the component ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"h()")," call; reproduce the virtual dom tree (using hard-coded object and array literals, strings, numbers, etc) at each level until the desired element is reached, and then compare the real component tree with the mock tree (Again, often by ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"stringify"),"-ing both and comparing the results).")),i.a.createElement(r.MDXTag,{name:"p",components:a},"During my initial search, I found neither of these methods appealing, mostly because they both require a lot of mock writing; certainly undesirable when testing modules that tend to change often."),i.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"a-simpler-way"}},"A simpler way"),i.a.createElement(r.MDXTag,{name:"p",components:a},"The solution I\u2019ve gone with, a function I\u2019ve named \u201cElFinder\u201d, attempts to offer the simplicity of Example 1 with the specificity of Example 2b."),i.a.createElement(r.MDXTag,{name:"p",components:a},"Here\u2019s how the same test case from above ends up looking using the ElFinder function:"),i.a.createElement(r.MDXTag,{name:"ul",components:a},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"li"},"Example 3a."))),i.a.createElement(r.MDXTag,{name:"pre",components:a,props:{className:"language-jsx"}},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js",metastring:null,dangerouslySetInnerHTML:{__html:'<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Blurb element renders given text in element with expected ID.\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n\n    <span class="token keyword">const</span> el_blurb <span class="token operator">=</span> <span class="token function">ElFinder</span><span class="token punctuation">(</span>el_root<span class="token punctuation">)</span>                  <span class="token comment">// call ElFinder, pass an object returned from h().</span>\n          <span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span><span class="token function">byClass</span><span class="token punctuation">(</span><span class="token string">\'importantInfo\'</span><span class="token punctuation">)</span>          <span class="token comment">// use ElFinder methods to step down the tree.</span>\n          <span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span><span class="token function">byClass</span><span class="token punctuation">(</span><span class="token string">\'importantInfo_inner\'</span><span class="token punctuation">)</span>    <span class="token comment">// each call returns an ElFinder object, so fn calls can be chained.</span>\n          <span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span><span class="token function">byClass</span><span class="token punctuation">(</span><span class="token string">\'info_summary\'</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span><span class="token function">byClass</span><span class="token punctuation">(</span><span class="token string">\'summary_blurb\'</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// ... (rest of test is the same as previous full examples)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"Although the only method in use here is ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"firstChild.byClass"),", others are quite useful as well. Another way to get to the same resulting element (although less resilient to change) could be:"),i.a.createElement(r.MDXTag,{name:"ul",components:a},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"li"},"Example 3b."))),i.a.createElement(r.MDXTag,{name:"pre",components:a,props:{className:"language-jsx"}},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js",metastring:null,dangerouslySetInnerHTML:{__html:'    <span class="token comment">// ...</span>\n\n    <span class="token keyword">const</span> el_blurb <span class="token operator">=</span> <span class="token function">ElFinder</span><span class="token punctuation">(</span>el_root<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span>child<span class="token punctuation">.</span><span class="token function">atIndex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                          <span class="token comment">// div.importantInfo</span>\n          <span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span><span class="token function">byClass</span><span class="token punctuation">(</span><span class="token string">\'importantInfo_inner\'</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span><span class="token function">byIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment">// div.info_summary</span>\n          <span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span><span class="token function">byClass</span><span class="token punctuation">(</span><span class="token string">\'summary_blurb\'</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// ...</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"In example 3b, we get some of the children by index rather than by matching their attributes."),i.a.createElement(r.MDXTag,{name:"p",components:a},"In some cases, these functions allow us to not only make our tests more specific, but also to simplify and omit steps:"),i.a.createElement(r.MDXTag,{name:"ul",components:a},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"li"},"Example 4."))),i.a.createElement(r.MDXTag,{name:"pre",components:a,props:{className:"language-jsx"}},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js",metastring:null,dangerouslySetInnerHTML:{__html:'    <span class="token comment">// ...</span>\n\n    <span class="token keyword">const</span> el_blurb <span class="token operator">=</span> <span class="token function">ElFinder</span><span class="token punctuation">(</span>el_root<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span>child<span class="token punctuation">.</span><span class="token function">atIndex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span><span class="token function">byClass</span><span class="token punctuation">(</span><span class="token string">\'importantInfo_inner\'</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span><span class="token function">byIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span><span class="token function">byId</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_summary_blurb`</span></span><span class="token punctuation">)</span>  <span class="token comment">// use ID to find element here</span>\n\n    <span class="token comment">// NOTE:</span>\n    <span class="token comment">// This check is no longer needed, existence of element with matching ID is checked</span>\n    <span class="token comment">// when we access firstChild.byId above.</span>\n    <span class="token comment">//</span>\n    <span class="token comment">// verify ID is correct</span>\n    <span class="token comment">// expect(el_blurb.attributes.id)</span>\n    <span class="token comment">//    .toEqual(`${props.key}_summary_blurb`)</span>\n\n    <span class="token function">expect</span><span class="token punctuation">(</span>el_blurb<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>blurb<span class="token punctuation">)</span>\n\n    <span class="token comment">// ...</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"Using the ID to find a child element in this case allows us to exclude the standalone ID check that was used in all the other examples. If the call to ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"firstChild.byId")," returns undefined, the test will fail and we\u2019ll know the ID was invalid."),i.a.createElement(r.MDXTag,{name:"p",components:a},"Some of the ElFinder functions return arrays, allowing us to keep tests concise and clean. Here we store references to several elements who share the same parent and class name."),i.a.createElement(r.MDXTag,{name:"ul",components:a},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"li"},"Example 5."))),i.a.createElement(r.MDXTag,{name:"pre",components:a,props:{className:"language-jsx"}},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js",metastring:null,dangerouslySetInnerHTML:{__html:'    <span class="token keyword">const</span> el_divInner <span class="token operator">=</span> <span class="token function">ElFinder</span><span class="token punctuation">(</span>el_root<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span><span class="token function">byClass</span><span class="token punctuation">(</span><span class="token string">\'importantInfo\'</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span><span class="token function">byClass</span><span class="token punctuation">(</span><span class="token string">\'importantInfo_inner\'</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> <span class="token punctuation">[</span> summary<span class="token punctuation">,</span> content<span class="token punctuation">,</span> footer <span class="token punctuation">]</span> <span class="token operator">=</span> el_divInner<span class="token punctuation">.</span>allChildren<span class="token punctuation">.</span><span class="token function">withClass</span><span class="token punctuation">(</span><span class="token string">\'commonClNm\'</span><span class="token punctuation">)</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},i.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"p"},"Note that the order of the array returned from ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"em"},"allChildren.withClass")," here is dependent on the order of the elements within their parent.")),i.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"how-it-works"}},"How it Works"),i.a.createElement(r.MDXTag,{name:"p",components:a},"The ElFinder function accepts a Hyperapp VDOM element (Some compiled JSX expression, or a direct call to Hyperapp\u2019s ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"h")," function) as an argument, and returns a new object containing all of the element\u2019s properties, as well as some new ones; We add new properties containing composable functions allowing us to dig deeper into the VDOM tree. Most of these functions return a new call to ElFinder, as well as a few that return the raw Hyperapp VDOM element (primarily used when verifying a pure text child element)."),i.a.createElement(r.MDXTag,{name:"p",components:a},"Here\u2019s a rundown of the shape of the object returned from ElFinder:"),i.a.createElement(r.MDXTag,{name:"ul",components:a},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"li"},"Existing Hyperapp VDOM Element Properties"),i.a.createElement(r.MDXTag,{name:"ul",components:a,parentName:"li"},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"nodeName, attributes, children, key"))),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"li"},"child"),i.a.createElement(r.MDXTag,{name:"ul",components:a,parentName:"li"},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"strong",components:a,parentName:"li"},"atIndexRaw")," - Child at index (raw h call object)"),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"strong",components:a,parentName:"li"},"atIndex")," - ElFinder instance of child at index"))),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"li"},"firstChild"),i.a.createElement(r.MDXTag,{name:"ul",components:a,parentName:"li"},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"strong",components:a,parentName:"li"},"raw")," - first child element (raw h call object)"),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"strong",components:a,parentName:"li"},"byIndex")," - ElFinder instance of first child, accessed by index in parent\u2019s children array"),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"strong",components:a,parentName:"li"},"byId")," - ElFinder instance of first child with matching ID attribute"),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"strong",components:a,parentName:"li"},"byType")," - ElFinder instance of first child with matching element type (nodeName property)"),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"strong",components:a,parentName:"li"},"byClass")," - ElFinder instance of first child with matching className atrribute"))),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"li"},"allChildren"),i.a.createElement(r.MDXTag,{name:"ul",components:a,parentName:"li"},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"strong",components:a,parentName:"li"},"ofType")," - array of ElFinder instances for each child matching element type (nodeName property)"),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},i.a.createElement(r.MDXTag,{name:"strong",components:a,parentName:"li"},"withClass")," - array of ElFinder instances for each child with matching className attribute")))),i.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"full-elfinder-function"}},"Full ElFinder function"),i.a.createElement(r.MDXTag,{name:"pre",components:a,props:{className:"language-jsx"}},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js",metastring:null,dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> <span class="token function-variable function">ElFinder</span> <span class="token operator">=</span> el <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// carry over existing element properties</span>\n    <span class="token operator">...</span>el<span class="token punctuation">,</span>\n\n    child<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// child at index (raw vdom object)</span>\n        <span class="token comment">// does not wrap in ElFinder object</span>\n        atIndexRaw<span class="token punctuation">:</span> index <span class="token operator">=></span> el<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n        <span class="token comment">// ElFinder instance of child at index</span>\n        atIndex<span class="token punctuation">:</span> index <span class="token operator">=></span> <span class="token function">ElFinder</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    firstChild<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// first child element (raw vdom object)</span>\n        <span class="token comment">// does not wrap in ElFinder object</span>\n        raw<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> el<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n        <span class="token comment">// ElFinder instance of element\'s first child element</span>\n        byIndex<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">ElFinder</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n        <span class="token comment">// ElFinder instance of first child element with matching ID attribute</span>\n        byId<span class="token punctuation">:</span> id <span class="token operator">=></span> <span class="token function">ElFinder</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>el <span class="token operator">=></span> el<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n        <span class="token comment">// ElFinder instance of first child element with matching type (nodeName property)</span>\n        byType<span class="token punctuation">:</span> type <span class="token operator">=></span> <span class="token function">ElFinder</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>el <span class="token operator">=></span> el<span class="token punctuation">.</span>nodeName <span class="token operator">===</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n        <span class="token comment">// ElFinder instance of first child element with matching className attribute</span>\n        <span class="token comment">// return an element only if the attribute exists (truthy) &#x26; includes the passed string</span>\n        byClass<span class="token punctuation">:</span> className <span class="token operator">=></span>\n                <span class="token function">ElFinder</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>el <span class="token operator">=></span> el<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className\n                        <span class="token operator">?</span> el<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>\n                        <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    allChildren<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// array of ElFinder instances for each child matching element type (nodeName property)</span>\n        ofType<span class="token punctuation">:</span> type <span class="token operator">=></span>\n                el<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>el <span class="token operator">=></span> el<span class="token punctuation">.</span>nodeName <span class="token operator">===</span> type<span class="token punctuation">)</span>\n                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>el <span class="token operator">=></span> <span class="token function">ElFinder</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n        <span class="token comment">// array of ElFinder instances for each child with matching className attribute</span>\n        withClass<span class="token punctuation">:</span> className <span class="token operator">=></span>\n                el<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>el <span class="token operator">=></span> el<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className\n                        <span class="token operator">?</span> el<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>\n                        <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>el <span class="token operator">=></span> <span class="token function">ElFinder</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"The focuses of this utility were to stay tiny, reusable, and to offer a composable workflow that stays close to the familiar Hyperapp VDOM element shape."),i.a.createElement(r.MDXTag,{name:"p",components:a},"Feel free to use this function in your own tests. Currently there are no plans to publish it as a Node module; I don\u2019t think it warrants a module, though this may change in the future."))}}]),a}(i.a.Component),k=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return[{id:"a-simpler-way",level:2,title:"A simpler way",children:[]},{id:"how-it-works",level:2,title:"How it Works",children:[]},{id:"full-elfinder-function",level:2,title:"Full ElFinder function",children:[]}]},d={}}}]);
//# sourceMappingURL=15.bec5874a.chunk.js.map